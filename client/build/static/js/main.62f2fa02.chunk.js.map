{"version":3,"sources":["services/auth-service.js","components/Navbar/NavigationBar.js","components/Landing/Landing.js","App.js","reportWebVitals.js","serviceWorker.js","index.js"],"names":["API_URL","username","password","axios","post","then","response","data","accessToken","localStorage","setItem","JSON","stringify","console","log","window","getItem","catch","error","removeItem","parse","AuthService","getCurrentUser","Landing","className","App","component","Navbar","expand","variant","Container","Toggle","Collapse","id","Nav","Link","href","exact","path","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"oTAEMA,EAAU,6BAkDD,M,qFA3Cb,SAAMC,EAAUC,GACdC,IACCC,KAAKJ,EAAU,UAAW,CACzBC,WACAC,aAEDG,MAAK,SAAAC,GACAA,EAASC,KAAKC,cAEhBC,aAAaC,QAAQ,OAAQC,KAAKC,UAAUN,EAASC,OACrDM,QAAQC,IAAIC,OAAON,aAAaO,QAAQ,aAG3CC,OAAM,SAAUC,GACfL,QAAQC,IAAII,Q,oBAMhB,WACET,aAAaU,WAAW,U,sBAG1B,SAASlB,EAAUC,GACjBC,IAAMC,KAAN,UAAcJ,EAAd,WAAgC,CAC9BC,WACAC,aAEDG,MAAK,SAAUC,GACdO,QAAQC,IAAIR,MAEbW,OAAM,SAAUC,GACfL,QAAQC,IAAII,Q,4BAKhB,WACE,OAAOP,KAAKS,MAAMX,aAAaO,QAAQ,a,aC1ChCK,EAAYC,iB,MCHR,SAASC,IACtB,OACE,sBAAKC,UAAU,UAAf,UAEE,qBAAKA,UAAU,OAAf,SACE,gCACE,oDAGA,sDAKJ,wBAKA,sBAAKA,UAAU,QAAf,UACE,gFACkD,OAGlD,sD,MCDOC,MAff,WACC,OACE,sBAAKD,UAAU,MAAf,iBAEC,cAAC,IAAD,CAAOE,UFMP,cAACC,EAAA,EAAD,CAAQC,OAAO,KAAKC,QAAQ,QAAQL,UAAU,SAA9C,SACE,eAACM,EAAA,EAAD,WACE,cAACH,EAAA,EAAOI,OAAR,CAAe,gBAAc,qBAC7B,cAACJ,EAAA,EAAOK,SAAR,CAAiBC,GAAG,mBAApB,SASE,cAACC,EAAA,EAAD,UACE,cAACA,EAAA,EAAIC,KAAL,CAAUX,UAAU,WAAWY,KAAK,SAApC,8BEjBR,cAAC,IAAD,UAEC,cAAC,IAAD,CAAOC,OAAK,EAACC,KAAK,IAAIZ,UAAWH,UCPrBgB,EAZO,SAAAC,GAChBA,GAAeA,aAAuBC,UACxC,6BAAqBpC,MAAK,YAAkD,IAA/CqC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCKIO,QACa,cAA7BhC,OAAOiC,SAASC,UAEe,UAA7BlC,OAAOiC,SAASC,UAEhBlC,OAAOiC,SAASC,SAASC,MACvB,2DCPRC,IAASC,OACP,cAAC,IAAD,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SDoHlB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBpD,MAAK,SAAAqD,GACJA,EAAaC,gBAEd1C,OAAM,SAAAC,GACLL,QAAQK,MAAMA,EAAM0C,YClH9BrB,M","file":"static/js/main.62f2fa02.chunk.js","sourcesContent":["import axios from \"axios\";\r\n\r\nconst API_URL = \"http://localhost:8080/user\";\r\n\r\n// handles authentication for the user (login, logout, register) and also can get the currently authenticated user's info\r\n\r\nclass AuthService {\r\n  \r\n  // authenticates user and saves accessToken in localStorage\r\n  login(username, password) {\r\n    axios\r\n    .post(API_URL + \"/signin\", {\r\n      username,\r\n      password\r\n    })\r\n    .then(response => {\r\n      if (response.data.accessToken) {\r\n        // saves accesstoken to browser's local storage\r\n        localStorage.setItem(\"user\", JSON.stringify(response.data));\r\n        console.log(window.localStorage.getItem('user'))\r\n      }\r\n    })\r\n    .catch(function (error) {\r\n      console.log(error);\r\n    });\r\n     \r\n  }\r\n\r\n  // logs currently authenticated user out\r\n  logout() {\r\n    localStorage.removeItem(\"user\");\r\n  }\r\n\r\n  register(username, password) {\r\n    axios.post(`${API_URL}/signup`, {\r\n      username,\r\n      password\r\n    })\r\n    .then(function (response) {\r\n      console.log(response);\r\n    })\r\n    .catch(function (error) {\r\n      console.log(error);\r\n    });\r\n  }\r\n\r\n  // get current user's ID and accesstoken\r\n  getCurrentUser() {\r\n    return JSON.parse(localStorage.getItem('user'));;\r\n  }\r\n}\r\n\r\nexport default new AuthService();","import React from \"react\"\r\nimport { Redirect } from \"react-router-dom\"\r\nimport { Navbar, Container, Nav } from \"react-bootstrap\"\r\nimport \"./navbar.css\"\r\nimport AuthService from \"../../services/auth-service\";\r\n\r\nvar user = AuthService.getCurrentUser();\r\n\r\nexport default function NavigationBar() {\r\n  //super(props);\r\n  //this.logoutUser = this.logoutUser.bind(this);\r\n\r\n  const logoutUser = () => {\r\n    AuthService.logout();\r\n    return (\r\n      <Redirect to=\"/\" />\r\n    );\r\n  };\r\n\r\n  //function NavigationBar() {\r\n  return (\r\n    <Navbar expand=\"lg\" variant=\"light\" className=\"navbar\">\r\n      <Container>\r\n        <Navbar.Toggle aria-controls=\"basic-navbar-nav\" />\r\n        <Navbar.Collapse id=\"basic-navbar-nav\">\r\n          {/* Logo Section          <Nav className=\"me-auto\">\r\n            <Navbar.Brand href=\"/\">\r\n       \r\n            </Navbar.Brand>\r\n          </Nav>*/}\r\n \r\n          \r\n          {/* Links Section */}\r\n          <Nav>\r\n            <Nav.Link className=\"nav-item\" href=\"/cards\">Cards</Nav.Link>\r\n            {/* Conditional rendering of logged-in features             {!user && <Nav.Link className=\"nav-item\" href=\"/login\">Login page</Nav.Link>}\r\n            {user && <Nav.Link className=\"nav-item\" onClick={logoutUser}>Logout</Nav.Link>}*/}\r\n\r\n          </Nav>\r\n        </Navbar.Collapse>\r\n      </Container>\r\n    </Navbar>\r\n  );\r\n  \r\n  //}\r\n}\r\n\r\n//export default NavigationBar","import React from \"react\"\r\nimport \"./Landing.css\"\r\n\r\nexport default function Landing() {\r\n  return (\r\n    <div className=\"landing\">\r\n      {/* Landing Page 1 <img className=\"logo1\" alt=\"logo1\" src={Logo1} />*/}\r\n      <div className=\"hero\">\r\n        <div>\r\n          <p>\r\n            Create Study Cards!\r\n          </p>\r\n          <button>Get Started</button>\r\n        </div>\r\n      </div>\r\n\r\n      {/* Effects */}\r\n      <div>\r\n\r\n      </div>\r\n\r\n      {/* Landing Page 2 */}\r\n      <div className=\"hero2\">\r\n        <p>\r\n          Create cards for anything you are studying for!{\" \"}\r\n        </p>\r\n\r\n        <button>Learn More</button>\r\n      </div>\r\n    </div>\r\n\r\n  )\r\n}\r\n\r\n//export default Landing","import './App.css';\r\nimport { BrowserRouter as Route, Switch } from 'react-router-dom';\r\n//import { Switch, Route, Router } from \"react-router-dom\";\r\n\r\nimport NavigationBar from './components/Navbar/NavigationBar';\r\nimport Landing from './components/Landing/Landing';\r\nimport { Navbar, Container, Nav } from \"react-bootstrap\"\r\n\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\n\r\n//\t\t\t\t\t<Route path=\"/cards\" component={Cards} />\r\nfunction App() {\r\n\treturn (\r\n\t\t\t<div className=\"App\">\r\n\t\t\t\tTest\r\n\t\t\t\t<Route component={NavigationBar()} />\r\n\r\n\t\t\t\t<Switch>\r\n\r\n\t\t\t\t\t<Route exact path=\"/\" component={Landing} />\r\n\t\t\t\r\n\t\t\t\t</Switch>\r\n\t\t\t</div>\r\n\t);\r\n}\r\n\r\nexport default App;","const reportWebVitals = onPerfEntry => {\r\n    if (onPerfEntry && onPerfEntry instanceof Function) {\r\n      import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n        getCLS(onPerfEntry);\r\n        getFID(onPerfEntry);\r\n        getFCP(onPerfEntry);\r\n        getLCP(onPerfEntry);\r\n        getTTFB(onPerfEntry);\r\n      });\r\n    }\r\n  };\r\n  \r\n  export default reportWebVitals;","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n    window.location.hostname === 'localhost' ||\r\n      // [::1] is the IPv6 localhost address.\r\n      window.location.hostname === '[::1]' ||\r\n      // 127.0.0.0/8 are considered localhost for IPv4.\r\n      window.location.hostname.match(\r\n        /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n      )\r\n  );\r\n  \r\n  export function register(config) {\r\n    if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n      // The URL constructor is available in all browsers that support SW.\r\n      const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n      if (publicUrl.origin !== window.location.origin) {\r\n        // Our service worker won't work if PUBLIC_URL is on a different origin\r\n        // from what our page is served on. This might happen if a CDN is used to\r\n        // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n        return;\r\n      }\r\n  \r\n      window.addEventListener('load', () => {\r\n        const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n  \r\n        if (isLocalhost) {\r\n          // This is running on localhost. Let's check if a service worker still exists or not.\r\n          checkValidServiceWorker(swUrl, config);\r\n  \r\n          // Add some additional logging to localhost, pointing developers to the\r\n          // service worker/PWA documentation.\r\n          navigator.serviceWorker.ready.then(() => {\r\n            console.log(\r\n              'This web app is being served cache-first by a service ' +\r\n                'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n            );\r\n          });\r\n        } else {\r\n          // Is not localhost. Just register service worker\r\n          registerValidSW(swUrl, config);\r\n        }\r\n      });\r\n    }\r\n  }\r\n  \r\n  function registerValidSW(swUrl, config) {\r\n    navigator.serviceWorker\r\n      .register(swUrl)\r\n      .then(registration => {\r\n        registration.onupdatefound = () => {\r\n          const installingWorker = registration.installing;\r\n          if (installingWorker == null) {\r\n            return;\r\n          }\r\n          installingWorker.onstatechange = () => {\r\n            if (installingWorker.state === 'installed') {\r\n              if (navigator.serviceWorker.controller) {\r\n                // At this point, the updated precached content has been fetched,\r\n                // but the previous service worker will still serve the older\r\n                // content until all client tabs are closed.\r\n                console.log(\r\n                  'New content is available and will be used when all ' +\r\n                    'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n                );\r\n  \r\n                // Execute callback\r\n                if (config && config.onUpdate) {\r\n                  config.onUpdate(registration);\r\n                }\r\n              } else {\r\n                // At this point, everything has been precached.\r\n                // It's the perfect time to display a\r\n                // \"Content is cached for offline use.\" message.\r\n                console.log('Content is cached for offline use.');\r\n  \r\n                // Execute callback\r\n                if (config && config.onSuccess) {\r\n                  config.onSuccess(registration);\r\n                }\r\n              }\r\n            }\r\n          };\r\n        };\r\n      })\r\n      .catch(error => {\r\n        console.error('Error during service worker registration:', error);\r\n      });\r\n  }\r\n  \r\n  function checkValidServiceWorker(swUrl, config) {\r\n    // Check if the service worker can be found. If it can't reload the page.\r\n    fetch(swUrl, {\r\n      headers: { 'Service-Worker': 'script' }\r\n    })\r\n      .then(response => {\r\n        // Ensure service worker exists, and that we really are getting a JS file.\r\n        const contentType = response.headers.get('content-type');\r\n        if (\r\n          response.status === 404 ||\r\n          (contentType != null && contentType.indexOf('javascript') === -1)\r\n        ) {\r\n          // No service worker found. Probably a different app. Reload the page.\r\n          navigator.serviceWorker.ready.then(registration => {\r\n            registration.unregister().then(() => {\r\n              window.location.reload();\r\n            });\r\n          });\r\n        } else {\r\n          // Service worker found. Proceed as normal.\r\n          registerValidSW(swUrl, config);\r\n        }\r\n      })\r\n      .catch(() => {\r\n        console.log(\r\n          'No internet connection found. App is running in offline mode.'\r\n        );\r\n      });\r\n  }\r\n  \r\n  export function unregister() {\r\n    if ('serviceWorker' in navigator) {\r\n      navigator.serviceWorker.ready\r\n        .then(registration => {\r\n          registration.unregister();\r\n        })\r\n        .catch(error => {\r\n          console.error(error.message);\r\n        });\r\n    }\r\n  }","\r\nimport React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { BrowserRouter } from \"react-router-dom\";\r\nimport './index.css';\r\n\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\nimport * as serviceWorker from \"./serviceWorker\";\r\n\r\n\r\nReactDOM.render(\r\n  <BrowserRouter>\r\n    <App />\r\n  </BrowserRouter>,\r\n  document.getElementById('root')\r\n);\r\nserviceWorker.unregister();\r\n\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();"],"sourceRoot":""}