{"version":3,"sources":["services/auth-service.js","components/Navbar/NavigationBar.js","static/images/typewriter.png","components/Landing/Landing.js","static/images/features.png","services/cards-service.js","services/auth-header.js","services/user-service.js","components/Cards/Cards.js","components/Cards/createCard.js","components/Register/Register.js","components/Login/Login.js","App.js","reportWebVitals.js","serviceWorker.js","index.js"],"names":["API_URL","username","password","axios","post","then","response","data","accessToken","localStorage","setItem","JSON","stringify","console","log","window","getItem","catch","error","removeItem","parse","NavigationBar","props","user","AuthService","getCurrentUser","logoutUser","bind","logout","to","Navbar","expand","variant","className","Container","Toggle","Collapse","id","Nav","Link","href","Component","Landing","Hero","Info","cards","map","card","i","Card","title","description","Image","ratio","imageRatio","src","image","children","style","paddingTop","ref","useRef","useState","isHovered","setHovered","useSpring","xys","config","mass","tension","friction","precision","animatedProps","setAnimatedProps","div","onMouseEnter","onMouseMove","clientX","clientY","x","current","offsetLeft","scrollX","pageXOffset","document","body","scrollLeft","offsetTop","scrollY","pageYOffset","scrollTop","clientHeight","clientWidth","onMouseLeave","zIndex","transform","interpolate","y","s","Typewriter","content","headers","status","cardid","delete","get","authHeader","Cards","count","setCount","setData","useEffect","cardsService","getCards","onClick","e","type","value","deleteCard","_id","CardsComponent","cardTitle","setCardTitle","cardBody","setBody","history","useHistory","for","onChange","target","rows","cols","push","authService","submitCard","RegisterUser","registerUsername","setUsername","registerPassword","setPassword","register","Login","loginUsername","loginPassword","login","App","exact","path","component","CreateCard","Register","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","Boolean","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.f42a9d93.chunk.js","sourcesContent":["import axios from \"axios\";\r\n\r\nconst API_URL = \"/user\";\r\n\r\n// handles authentication for the user (login, logout, register) and also can get the currently authenticated user's info\r\n\r\nclass AuthService {\r\n  \r\n  // authenticates user and saves accessToken in localStorage\r\n  login(username, password) {\r\n    axios\r\n    .post(API_URL + \"/signin\", {\r\n      username,\r\n      password\r\n    })\r\n    .then(response => {\r\n      if (response.data.accessToken) {\r\n        // saves accesstoken to browser's local storage\r\n        localStorage.setItem(\"user\", JSON.stringify(response.data));\r\n        console.log(window.localStorage.getItem('user'))\r\n      }\r\n    })\r\n    .catch(function (error) {\r\n      console.log(error);\r\n    });\r\n     \r\n  }\r\n\r\n  // logs currently authenticated user out\r\n  logout() {\r\n    localStorage.removeItem(\"user\");\r\n  }\r\n\r\n  register(username, password) {\r\n    axios.post(`${API_URL}/signup`, {\r\n      username,\r\n      password\r\n    })\r\n    .then(function (response) {\r\n      console.log(response);\r\n    })\r\n    .catch(function (error) {\r\n      console.log(error);\r\n    });\r\n  }\r\n\r\n  // get current user's ID and accesstoken\r\n  getCurrentUser() {\r\n    return JSON.parse(localStorage.getItem('user'));;\r\n  }\r\n}\r\n\r\nexport default new AuthService();","import React, { useState } from \"react\"\r\nimport { Redirect } from \"react-router-dom\"\r\nimport { Navbar, Container, Nav } from \"react-bootstrap\"\r\nimport \"./navbar.css\"\r\nimport AuthService from \"../../services/auth-service\";\r\nimport { Component } from \"react\"\r\nimport { useHistory } from 'react-router-dom';\r\n\r\n//var user = AuthService.getCurrentUser();\r\n\r\nexport default class NavigationBar extends Component{\r\n  \r\n  constructor(props) {\r\n    super(props);\r\n    this.user = AuthService.getCurrentUser();\r\n    this.logoutUser = this.logoutUser.bind(this);\r\n}\r\nlogoutUser(){\r\n  AuthService.logout();\r\n  return (\r\n    <Redirect to=\"/\" />\r\n  );\r\n};\r\n\r\n  //function NavigationBar() {\r\n  render(){\r\n\r\n  return (\r\n    <Navbar expand=\"lg\" variant=\"light\" className=\"navbar\">\r\n      <Container>\r\n        <Navbar.Toggle aria-controls=\"basic-navbar-nav\" />\r\n        <Navbar.Collapse id=\"basic-navbar-nav\">\r\n          {/* Logo Section          <Nav className=\"me-auto\">\r\n            <Navbar.Brand href=\"/\">\r\n       \r\n            </Navbar.Brand>\r\n          </Nav>*/}\r\n \r\n          \r\n          {/* Links Section */}\r\n          <Nav>\r\n            <Nav.Link className=\"nav-item\" href=\"/cards\">Cards</Nav.Link>\r\n            <Nav.Link className=\"nav-item\" href=\"/\">Home</Nav.Link>\r\n            <Nav.Link className=\"nav-item\" href=\"/createCard\">Make a New Card</Nav.Link>\r\n            <Nav.Link className=\"nav-item\" href=\"/login\">Login</Nav.Link>\r\n            <Nav.Link className=\"nav-item\" href=\"/register\">Register</Nav.Link>\r\n\r\n            {/* Conditional rendering of logged-in features             {!user && <Nav.Link className=\"nav-item\" href=\"/login\">Login page</Nav.Link>}\r\n            {user && <Nav.Link className=\"nav-item\" onClick={logoutUser}>Logout</Nav.Link>}*/}\r\n\r\n          </Nav>\r\n        </Navbar.Collapse>\r\n      </Container>\r\n    </Navbar>\r\n  );\r\n  \r\n  }\r\n}\r\n\r\n//export default NavigationBar","export default __webpack_public_path__ + \"static/media/typewriter.11dc0df1.png\";","import React, { useState, useRef } from 'react';\r\nimport \"./Landing.css\"\r\nimport { useSpring, animated } from 'react-spring';\r\nimport ReactDOM from 'react-dom';\r\nimport particlesConfig from './particles-config.js';\r\nimport Typewriter from '../../static/images/typewriter.png'\r\nimport Features from '../../static/images/features.png'\r\n\r\nexport default function Landing() {\r\n  return (\r\n    <div className=\"landing\">\r\n      {/* Landing Page 1 <img className=\"logo1\" alt=\"logo1\" src={Logo1} />*/}\r\n      <div className=\"hero\">\r\n        <div>\r\n          <p>\r\n            Create Study Cards!\r\n          </p>\r\n          <a href=\"/card\">\r\n            <button>Get Started</button>\r\n          </a>\r\n        </div>\r\n      </div>\r\n\r\n      {/* Effects */}\r\n      <div className=\"main\">\r\n        <Hero>\r\n          <div className=\"container\">\r\n            <Info />\r\n            <div className=\"row\">\r\n              {cards.map((card, i) => (\r\n                <div className=\"column\">\r\n                  <Card>\r\n                    <div className=\"card-title\">{card.title}</div>\r\n                    <div className=\"card-body\">{card.description}</div>\r\n                    <Image ratio={card.imageRatio} src={card.image} />\r\n                  </Card>\r\n                </div>\r\n              ))}\r\n            </div>\r\n          </div>\r\n        </Hero>\r\n    </div>\r\n    <div className  = \"hero\">\r\n      Share with your friends!\r\n    </div>\r\n\r\n      {/* Landing Page 2 */}\r\n      <div className=\"hero2\">\r\n        <p>\r\n          Create cards for anything you are studying for!{\" \"}\r\n        </p>\r\n\r\n        <button>Learn More</button>\r\n      </div>\r\n      <footer></footer>\r\n    </div>\r\n\r\n  )\r\n}\r\n\r\nfunction Hero({ children }) {\r\n  return (\r\n    <div className=\"hero\">\r\n      <div className=\"hero-body\">{children}</div>\r\n    </div>\r\n  );\r\n}\r\n\r\nfunction Info() {\r\n  return (\r\n    <div className=\"info\">\r\n \r\n    </div>\r\n  );\r\n}\r\n\r\nfunction Image({ ratio, src }) {\r\n  return (\r\n    <div className=\"image-container\">\r\n      <div className=\"image-inner-container\">\r\n        <div\r\n          className=\"ratio\"\r\n          style={{\r\n            paddingTop: ratio * 100 + '%'\r\n          }}\r\n        >\r\n          <div className=\"ratio-inner\">\r\n            <img src={src} />\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nfunction Card({ children }) {\r\n  // We add this ref to card element and use in onMouseMove event ...\r\n  // ... to get element's offset and dimensions.\r\n  const ref = useRef();\r\n\r\n  // Keep track of whether card is hovered so we can increment ...\r\n  // ... zIndex to ensure it shows up above other cards when animation causes overlap.\r\n  const [isHovered, setHovered] = useState(false);\r\n\r\n  const [animatedProps, setAnimatedProps] = useSpring(() => {\r\n    return {\r\n      // Array containing [rotateX, rotateY, and scale] values.\r\n      // We store under a single key (xys) instead of separate keys ...\r\n      // ... so that we can use animatedProps.xys.interpolate() to ...\r\n      // ... easily generate the css transform value below.\r\n      xys: [0, 0, 1],\r\n      // Setup physics\r\n      config: { mass: 10, tension: 400, friction: 40, precision: 0.00001 }\r\n    };\r\n  });\r\n\r\n  return (\r\n    <animated.div\r\n      ref={ref}\r\n      className=\"card\"\r\n      onMouseEnter={() => setHovered(true)}\r\n      onMouseMove={({ clientX, clientY }) => {\r\n        // Get mouse x position within card\r\n        const x =\r\n          clientX -\r\n          (ref.current.offsetLeft -\r\n            (window.scrollX || window.pageXOffset || document.body.scrollLeft));\r\n\r\n        // Get mouse y position within card\r\n        const y =\r\n          clientY -\r\n          (ref.current.offsetTop -\r\n            (window.scrollY || window.pageYOffset || document.body.scrollTop));\r\n\r\n        // Set animated values based on mouse position and card dimensions\r\n        const dampen = 50; // Lower the number the less rotation\r\n        const xys = [\r\n          -(y - ref.current.clientHeight / 2) / dampen, // rotateX\r\n          (x - ref.current.clientWidth / 2) / dampen, // rotateY\r\n          1.07 // Scale\r\n        ];\r\n\r\n        // Update values to animate to\r\n        setAnimatedProps({ xys: xys });\r\n      }}\r\n      onMouseLeave={() => {\r\n        setHovered(false);\r\n        // Set xys back to original\r\n        setAnimatedProps({ xys: [0, 0, 1] });\r\n      }}\r\n      style={{\r\n        // If hovered we want it to overlap other cards when it scales up\r\n        zIndex: isHovered ? 2 : 1,\r\n        // Interpolate function to handle css changes\r\n        transform: animatedProps.xys.interpolate(\r\n          (x, y, s) =>\r\n            `perspective(600px) rotateX(${x}deg) rotateY(${y}deg) scale(${s})`\r\n        )\r\n      }}\r\n    >\r\n      {children}\r\n    </animated.div>\r\n  );\r\n}\r\n\r\nconst cards = [\r\n  {\r\n    title: 'Study Cards that are easy to access and manage.',\r\n    description:\r\n      'Users upload study cards for various subjects.',\r\n    image: Features,\r\n    imageRatio: 1016 / 1016\r\n  },\r\n  {\r\n    title: 'Many Subjects and Tools',\r\n    description:\r\n      'Browse other user study cards, ranging from Math to Medicine!',\r\n    image: Typewriter,\r\n    imageRatio: 839 / 1133\r\n  },\r\n\r\n];\r\n\r\n//export default Landing","export default __webpack_public_path__ + \"static/media/features.94d3cf4e.png\";","import axios from \"axios\";\r\n\r\nconst API_URL = \"/card\";\r\n\r\n// handles features for posts (submitting, updating, deleting, retrieving posts)\r\nclass cardsService {\r\n\r\n    // makes a POST req to backend to submit post into the database\r\n    // takes in title and body of post as well as the author \r\n    submitCard(title, content, accessToken) {\r\n        axios\r\n        .post(`${API_URL}/create`, {\r\n            title,\r\n            content\r\n        },\r\n        {\r\n            headers: {\r\n                'x-access-token': accessToken\r\n            }\r\n        })\r\n        .then( response => {\r\n            if (response.status == '200') {\r\n                console.log('Card was successfully submitted')\r\n            }\r\n        })\r\n        .catch(function(error) {\r\n            console.log(error);\r\n        });\r\n    }\r\n\r\n    deleteCard(cardid, accessToken) {\r\n        axios.delete(API_URL + '/delete/'+ cardid, {\r\n            headers: {\r\n            'x-access-token': accessToken\r\n            },\r\n            data: cardid\r\n        });\r\n    }\r\n\r\n    getCards() {\r\n        return axios.get(API_URL)\r\n        //.then(function(posts){\r\n          //  console.log(posts)\r\n        //}\r\n        //);\r\n    }\r\n\r\n\r\n}\r\n\r\nexport default new cardsService();","export default function authHeader() {\r\n    const user = JSON.parse(localStorage.getItem('user'));\r\n  \r\n    if (user && user.accessToken) {\r\n      // for Node.js Express back-end\r\n      return { 'x-access-token': user.accessToken };\r\n    } else {\r\n      return {};\r\n    }\r\n  }","/*import http from \"../http-common\";\r\nimport axios from 'axios';\r\nimport authHeader from './auth-header';\r\n*/\r\nimport axios from 'axios';\r\nimport authHeader from './auth-header';\r\n\r\n//API URL \r\nconst API_URL = '/';\r\n\r\nclass UserService {\r\n  getPublicContent() {\r\n    return axios.get(API_URL + 'all');\r\n  }\r\n\r\n  getUserBoard() {\r\n    return axios.get(API_URL + 'user', { headers: authHeader() });\r\n  }\r\n\r\n  getUserID(id) {\r\n    return axios.get(API_URL + 'user/'+ id)\r\n  }\r\n\r\n\r\n}\r\n\r\nexport default new UserService();\r\n\r\n/*\r\nclass UserDataService {\r\n  getAll() {\r\n    return http.get(\"/user\");\r\n  }\r\n  get(id) {\r\n    return http.get(`/user/${id}`);\r\n  }\r\n  create(data) {\r\n    return http.post(\"/user/signup\", data);\r\n  }\r\n  update(id, data) {\r\n    return http.put(`/user/${id}`, data);\r\n  }\r\n  delete(id) {\r\n    return http.delete(`/user/${id}`);\r\n  }\r\n  deleteAll() {\r\n    return http.delete(`/users`);\r\n  }\r\n  findByTitle(title) {\r\n    return http.get(`/users?title=${title}`);\r\n  }\r\n  \r\n}\r\nexport default new UserDataService();\r\n*/","import { React, useEffect, useState } from 'react';\r\nimport { useSelector } from 'react-redux';\r\nimport { NavLink } from 'react-router-dom';\r\nimport './Cards.css';\r\n\r\nimport AuthService from '../../services/auth-service';\r\nimport cardsService from '../../services/cards-service';\r\nimport UserService from '../../services/user-service';\r\n\r\nfunction Cards() {\r\n\tconst user = AuthService.getCurrentUser()\r\n\tvar [count, setCount] = useState(0);\r\n\r\n\tconst [data, setData] = useState(null);\r\n\tuseEffect(() => {\r\n\t\tcardsService.getCards().then(cards => {\r\n\t\t  setData(cards.data)\r\n\t\t  // console.log(posts.data)\r\n\t\t})\r\n\t  })\r\n\t// Gets post from database and returns parsed jsx elements\r\n\t//          <input type=\"button\" value=\"Submit\" onClick={deletePost(e._id)}></input>\r\n\r\n\tconst generateCards = () => {\r\n\t\treturn data.map(e => {\r\n\t\r\n\t\t  return(\r\n\t\t\t<div className = 'blurbs'>\r\n\t\t\t  <div className='cardHead'>\r\n\t\t\t\t<h1>{e.title}</h1>\t\t\t\r\n\t\t\t  </div>\r\n\t\t\t  <p>{e.content}</p>\r\n\t\t\t  <div>\r\n\t\t\t  <input type=\"button\" value=\"Delete\" onClick={() => cardsService.deleteCard(e._id, AuthService.getCurrentUser().accessToken)}></input>\r\n\t\t\t  </div>\r\n\t   \r\n\t\t\t</div>\r\n\t\t  )\r\n\t\t})\r\n\t\r\n\t  }\r\n\r\n\treturn (\r\n\t\t<div className=\"cards\">\r\n\t\t  <h1>Cards</h1>\r\n\t\t\t  \r\n\t\t  Like this Card Stack? \r\n\t\t\t\t<div>\r\n\t\t\t\t\t{count < 1 && <button onClick={() => setCount((count + 1))}>\r\n\t\t\t\t\t\t+\r\n\t\t\t\t\t</button>}\r\n\t\t\t\t\t<span>{count}</span>\r\n\t\t\t\t\t{count >= -1 && <button onClick={() => setCount((count - 1))}>\r\n\t\t\t\t\t\t-\r\n\t\t\t\t\t</button>}\r\n\t\t\t\t</div>\r\n\t\r\n\t\t  {/* Create Post button | Accessed via log-in*/}\r\n\t\t  {user &&\r\n\t\t\t<button>\r\n\t\t\t  <NavLink className=\"createCard\" to=\"/createCard\"> + Card</NavLink>\r\n\t\t\t</button>\r\n\t\t  }\r\n\t\t  \r\n\t\t  {/* DisplaysPosts */}\r\n\t\t  <div className=\"displayCards\">\r\n\t\t\t{data ? generateCards() : 'loading'}\r\n\t\t  </div>\r\n\t\t  \r\n\t\r\n\t\t</div>\r\n\t )\r\n}\r\n\r\nexport default Cards;","import { React, useEffect, useState } from 'react';\r\nimport { Link, useHistory } from 'react-router-dom';\r\n\r\n// importing authService in order to use function that gets info of currently authenticated user\r\nimport authService from \"../../services/auth-service\";\r\nimport cardsService from \"../../services/cards-service\";\r\n\r\n// form for submitting a post\r\n\r\n\r\nfunction CardsComponent() {\r\n    //constructor(props) {\r\n    //    super(props); \r\n\r\n    // refs for title and body of post\r\n    //var cardTitle = React.createRef(); \r\n    //var cardBody = React.createRef(); \r\n    const [cardTitle, setCardTitle] = useState('');\r\n\tconst [cardBody, setBody] = useState('');\r\n\r\n    var history = useHistory();\r\n    \r\n    // function for submitting post\r\n    //this.submitCard = this.submitCard.bind(this);\r\n   \r\n\r\n    //}\r\n\r\n    //submits posts with title, body, and currently authenticated user's accessToken\r\n    const submitCard = () => {\r\n        history.push('/cards');\r\n\r\n        const title = cardTitle\r\n        const content = cardBody\r\n        const accessToken = authService.getCurrentUser().accessToken\r\n        cardsService.submitCard(title, content, accessToken)\r\n        \r\n    }\r\n    \r\n    \r\n    return (\r\n        <div>\r\n            <h1> Card Submission </h1>\r\n            <form>\r\n            <label for=\"cardTitle\"> Title: </label>\r\n\t\t\t\t<br />\r\n\r\n\t\t\t\t<input\r\n\t\t\t\t\ttype=\"text\"\r\n\t\t\t\t\tonChange={(e) => {\r\n\t\t\t\t\t\tsetCardTitle(e.target.value);\r\n\t\t\t\t\t}}\r\n\t\t\t\t></input>\r\n\t\t\t\t<br />\r\n\t\t\t\t<label for=\"cardBody\"> Body: </label>\r\n\t\t\t\t<br />\r\n\t\t\t\t<textarea\r\n\t\t\t\t\trows=\"4\"\r\n\t\t\t\t\tcols=\"50\"\r\n\t\t\t\t\tonChange={(e) => {\r\n\t\t\t\t\t\tsetBody(e.target.value);\r\n\t\t\t\t\t}}\r\n\t\t\t\t></textarea>\r\n\t\t\t\t<br />\r\n\r\n                <input type=\"button\" value=\"Submit\" onClick={() => submitCard(cardTitle, cardBody)}></input>\r\n            </form>\r\n        </div>\r\n    )\r\n    \r\n}\r\n\r\nexport default CardsComponent\r\n\r\n","import { React, useEffect, useState } from 'react';\r\n\r\nimport authService from \"../../services/auth-service\";\r\nimport { Link, useHistory } from 'react-router-dom';\r\n\r\n// page for registering a user account\r\nfunction RegisterUser() {\r\n    var history = useHistory();\r\n    const [registerUsername, setUsername] = useState('');\r\n    const [registerPassword, setPassword] = useState('');\r\n    \r\n    // create react references to username and password input elements\r\n    //var registerUsername = React.createRef();\r\n    //var registerPassword = React.createRef();\r\n\r\n    // declare function to register user on submit\r\n    //var registerUser = registerUser.bind(this);\r\n\r\n  // takes current values of inputted username and password and submits it to the backend through auth-services\r\n  const register = () => {\r\n    history.push('/');\r\n\r\n    const username = registerUsername; \r\n    const password = registerPassword;\r\n    authService.register(username, password)\r\n    console.log(`Username: ${username} \\nPassword: ${password}`)\r\n  }\r\n\r\n    return (\r\n        <div>\r\n        <h1>Registration</h1>    \r\n            <form>\r\n            <label for=\"registerUsername\"> Username: </label>\r\n\t\t\t\t<br />\r\n\r\n\t\t\t\t<input\r\n\t\t\t\t\ttype=\"text\"\r\n\t\t\t\t\tonChange={(e) => {\r\n\t\t\t\t\t\tsetUsername(e.target.value);\r\n\t\t\t\t\t}}\r\n\t\t\t\t></input>\r\n\t\t\t\t<br />\r\n\t\t\t\t<label for=\"registerPassword\"> Password: </label>\r\n\t\t\t\t<br />\r\n\t\t\t\t<input\r\n        type=\"password\"\r\n\r\n\t\t\t\t\tonChange={(e) => {\r\n\t\t\t\t\t\tsetPassword(e.target.value);\r\n\t\t\t\t\t}}\r\n\t\t\t\t></input>\r\n\t\t\t\t<br />\r\n\r\n                <input type=\"button\" value=\"Submit\" onClick={() => register(registerUsername, registerPassword)}></input>\r\n            </form>\r\n        </div>\r\n    )\r\n  \r\n}\r\n\r\nexport default RegisterUser","import { React, useEffect, useState } from 'react';\r\n\r\nimport authService from \"../../services/auth-service\";\r\nimport { Link, useHistory } from 'react-router-dom';\r\n\r\nfunction Login() {\r\n\r\n  var history = useHistory();\r\n    const [loginUsername, setUsername] = useState('');\r\n    const [loginPassword, setPassword] = useState('');\r\n    // create react references to username and password input elements\r\n    //var loginUsername = React.createRef();\r\n    //var loginPassword = React.createRef();\r\n  \r\n    // declare function to login user on submit\r\n    //var loginUser = loginUser.bind(this);\r\n  \r\n    // takes current values of inputted username and password and submits it to the backend through auth-services\r\n    const loginUser = () => {\r\n      history.push('/');\r\n\r\n      authService.login(loginUsername, loginPassword)\r\n      console.log(`Username: ${loginUsername} \\nPassword: ${loginPassword}`)\r\n    }\r\n\r\n\r\n  return (\r\n      <div>\r\n      <h1>Login</h1>    \r\n          <form>\r\n          <label for=\"loginUsername\"> Username: </label>\r\n      <br />\r\n\r\n      <input\r\n        type=\"text\"\r\n        onChange={(e) => {\r\n          setUsername(e.target.value);\r\n        }}\r\n      ></input>\r\n      <br />\r\n      <label for=\"loginPassword\"> Password: </label>\r\n      <br />\r\n      <input\r\n        type=\"password\"\r\n        onChange={(e) => {\r\n          setPassword(e.target.value);\r\n        }}\r\n      ></input>\r\n      <br />\r\n\r\n              <input type=\"button\" value=\"Submit\" onClick={() => loginUser(loginUsername, loginPassword)}></input>\r\n          </form>\r\n      </div>\r\n  );\r\n  \r\n}\r\n\r\nexport default Login\r\n","import './App.css';\r\nimport { Switch, Route } from 'react-router-dom';\r\n//import { Switch, Route, Router } from \"react-router-dom\";\r\n\r\nimport NavigationBar from './components/Navbar/NavigationBar';\r\nimport Landing from './components/Landing/Landing';\r\nimport Cards from './components/Cards/Cards';\r\nimport CreateCard from './components/Cards/createCard';\r\nimport { Navbar, Container, Nav } from \"react-bootstrap\"\r\nimport Register from './components/Register/Register';\r\nimport Login from './components/Login/Login';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport { BrowserRouter } from 'react-router-dom/cjs/react-router-dom.min';\r\nimport React from 'react';\r\n\r\n\r\n/*\r\n\t<Route component = {Landing} exact path=\"/\" />\r\n\t\t\t\t\t<Route component = {Cards} path=\"/cards\" />\r\n\t\t\t\t\t\r\n\t\t\t\t\t<Route component = { createCard} path=\"/createCard\" />\r\n*/\r\n\r\nfunction App() {\r\n\treturn (\r\n\t\t\t<div id = \"App\">\r\n\t\t\t\t<NavigationBar />\r\n\r\n\t\t\t\t<Switch>\r\n\t\t\t\t\t<Route exact path = \"/\" ><Landing /></Route>\r\n\t\t\t\t\t<Route component = {Cards} path=\"/cards\" />\r\n\t\t\t\t\t<Route component = {CreateCard} path=\"/createCard\" />\r\n\t\t\t\t\t<Route path=\"/register\" component={Register} />\r\n\t\t\t\t\t<Route path=\"/login\" component={Login} />\r\n\r\n\t\t\t\t</Switch>\r\n\t\t\t\t\r\n\t\t\t\t\r\n\t\t\t</div>\r\n\t\t\t\r\n\t);\r\n}\r\n\r\nexport default App;","const reportWebVitals = onPerfEntry => {\r\n    if (onPerfEntry && onPerfEntry instanceof Function) {\r\n      import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n        getCLS(onPerfEntry);\r\n        getFID(onPerfEntry);\r\n        getFCP(onPerfEntry);\r\n        getLCP(onPerfEntry);\r\n        getTTFB(onPerfEntry);\r\n      });\r\n    }\r\n  };\r\n  \r\n  export default reportWebVitals;","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n    window.location.hostname === 'localhost' ||\r\n      // [::1] is the IPv6 localhost address.\r\n      window.location.hostname === '[::1]' ||\r\n      // 127.0.0.0/8 are considered localhost for IPv4.\r\n      window.location.hostname.match(\r\n        /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n      )\r\n  );\r\n  \r\n  export function register(config) {\r\n    if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n      // The URL constructor is available in all browsers that support SW.\r\n      const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n      if (publicUrl.origin !== window.location.origin) {\r\n        // Our service worker won't work if PUBLIC_URL is on a different origin\r\n        // from what our page is served on. This might happen if a CDN is used to\r\n        // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n        return;\r\n      }\r\n  \r\n      window.addEventListener('load', () => {\r\n        const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n  \r\n        if (isLocalhost) {\r\n          // This is running on localhost. Let's check if a service worker still exists or not.\r\n          checkValidServiceWorker(swUrl, config);\r\n  \r\n          // Add some additional logging to localhost, pointing developers to the\r\n          // service worker/PWA documentation.\r\n          navigator.serviceWorker.ready.then(() => {\r\n            console.log(\r\n              'This web app is being served cache-first by a service ' +\r\n                'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n            );\r\n          });\r\n        } else {\r\n          // Is not localhost. Just register service worker\r\n          registerValidSW(swUrl, config);\r\n        }\r\n      });\r\n    }\r\n  }\r\n  \r\n  function registerValidSW(swUrl, config) {\r\n    navigator.serviceWorker\r\n      .register(swUrl)\r\n      .then(registration => {\r\n        registration.onupdatefound = () => {\r\n          const installingWorker = registration.installing;\r\n          if (installingWorker == null) {\r\n            return;\r\n          }\r\n          installingWorker.onstatechange = () => {\r\n            if (installingWorker.state === 'installed') {\r\n              if (navigator.serviceWorker.controller) {\r\n                // At this point, the updated precached content has been fetched,\r\n                // but the previous service worker will still serve the older\r\n                // content until all client tabs are closed.\r\n                console.log(\r\n                  'New content is available and will be used when all ' +\r\n                    'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n                );\r\n  \r\n                // Execute callback\r\n                if (config && config.onUpdate) {\r\n                  config.onUpdate(registration);\r\n                }\r\n              } else {\r\n                // At this point, everything has been precached.\r\n                // It's the perfect time to display a\r\n                // \"Content is cached for offline use.\" message.\r\n                console.log('Content is cached for offline use.');\r\n  \r\n                // Execute callback\r\n                if (config && config.onSuccess) {\r\n                  config.onSuccess(registration);\r\n                }\r\n              }\r\n            }\r\n          };\r\n        };\r\n      })\r\n      .catch(error => {\r\n        console.error('Error during service worker registration:', error);\r\n      });\r\n  }\r\n  \r\n  function checkValidServiceWorker(swUrl, config) {\r\n    // Check if the service worker can be found. If it can't reload the page.\r\n    fetch(swUrl, {\r\n      headers: { 'Service-Worker': 'script' }\r\n    })\r\n      .then(response => {\r\n        // Ensure service worker exists, and that we really are getting a JS file.\r\n        const contentType = response.headers.get('content-type');\r\n        if (\r\n          response.status === 404 ||\r\n          (contentType != null && contentType.indexOf('javascript') === -1)\r\n        ) {\r\n          // No service worker found. Probably a different app. Reload the page.\r\n          navigator.serviceWorker.ready.then(registration => {\r\n            registration.unregister().then(() => {\r\n              window.location.reload();\r\n            });\r\n          });\r\n        } else {\r\n          // Service worker found. Proceed as normal.\r\n          registerValidSW(swUrl, config);\r\n        }\r\n      })\r\n      .catch(() => {\r\n        console.log(\r\n          'No internet connection found. App is running in offline mode.'\r\n        );\r\n      });\r\n  }\r\n  \r\n  export function unregister() {\r\n    if ('serviceWorker' in navigator) {\r\n      navigator.serviceWorker.ready\r\n        .then(registration => {\r\n          registration.unregister();\r\n        })\r\n        .catch(error => {\r\n          console.error(error.message);\r\n        });\r\n    }\r\n  }","\r\nimport React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { BrowserRouter } from \"react-router-dom\";\r\nimport './index.css';\r\n\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\nimport * as serviceWorker from \"./serviceWorker\";\r\n\r\n\r\nReactDOM.render(\r\n  <BrowserRouter>\r\n    <App />\r\n  </BrowserRouter>,\r\n  document.getElementById('root')\r\n);\r\nserviceWorker.unregister();\r\n\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();"],"sourceRoot":""}